#+TITLE: Emacs configuration
#+AUTHOR: Norbert Horvath (norbert204)

* Bootstrapping
** Package handling
#+begin_src elisp

(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; initialize use-package on non-linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

;; initialize use-package
(require 'use-package)
(setq use-package-always-ensure t)

#+end_src
** Basic settings
#+begin_src elisp

;; clean this file from automatic customization garbage
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
        (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)

;; diminish modes from showing up in the modeline
(use-package diminish)

;; use utf-8
(set-language-environment "utf-8")

;; use spaces instead of tabs for indentation
(setq-default indent-tabs-mode nil)

;; use 4 space tabs by default
(setq-default tab-width 4)

;; please use spaces instead of tab character
(setq indent-line-function 'insert-tab)

;; a bit more friendly shortcut to insert a literal tab
(global-set-key (kbd "C-<tab>") 'tab-to-tab-stop)

;; use esc to quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; disable backup files
(setq backup-directory-alist '((".*" . "/dev/null")))
(setq make-backup-files nil)

;; disable line wrapping
(setq-default truncate-lines t)

;; Please autosave
(auto-save-visited-mode 1)

;; somewhat smooth scrolling
;; it's beyond me why achieving some sort of smooth scrolling in emacs is so difficult and hacky.
(setq scroll-conservatively 100000)
(setq scroll-margin 7)
(setq redisplay-dont-pause t)
(setq fast-but-imprecise-scrolling nil)

;; No popup windows and dialogs please
(setq use-file-dialog nil)
(setq use-dialog-box nil)
(setq pop-up-windows nil)

;; Give me the other half of the parenthesis automatically pls
(electric-pair-mode 1)

#+end_src
* Appearance
#+begin_src elisp

;; Disable start screen
; (setq inhibit-startup-message t)

;; Disable some UI elements
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)

;; Set font
(set-face-attribute 'default nil :font "JetBrainsMono Nerd Font Mono-14")
(set-face-attribute 'variable-pitch nil :font "Roboto-14")
(set-face-attribute 'fixed-pitch nil :font "JetBrainsMono Nerd Font Mono-14")
  
(add-to-list 'default-frame-alist '(font . "JetBrainsMono Nerd Font Mono-14"))

;; Highlight current line
(global-hl-line-mode 1)

;; Line numbers
(setq display-line-numbers-type 'relative) 
(global-display-line-numbers-mode 1)

; Disable line numbers for some modes
(dolist (mode '(term-mode-hook
                eshell-mode-hook
                vterm-mode-hook))
  (add-hook mode (lambda() (display-line-numbers-mode 0))))

;; Theme
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t)
  (setq doom-themes-enable-italic t)
  (load-theme 'doom-gruvbox t))

;; All the icons
(use-package all-the-icons
  :if (display-graphic-p))

;; Let dired have some icons
(use-package all-the-icons-dired
  :config
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

;; Doom modeline
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 40)))

(use-package centaur-tabs
  :after evil
  :demand
  :bind (:map evil-normal-state-map
              ("g t" . centaur-tabs-forward)
              ("g T" . centaur-tabs-backward))
  :custom
  (centaur-tabs-height 32)
  (centaur-tabs-set-icons t)
  (centaur-tabs-style "bar")
  (centaur-tabs-set-bar 'over)
  ;; (centaur-tabs-set-modified-marker t)
  :config
  (centaur-tabs-group-by-projectile-project)
  (centaur-tabs-mode t))

;; A fancier dashboard
(use-package dashboard
  :config (dashboard-setup-startup-hook)
  :custom ((initial-buffer-choice (lambda() (get-buffer-create "*dashboard*"))) ; For Emacsclient windows
           (dashboard-startup-banner 'logo)
           (dashboard-center-content t)
           (dashboard-items '((recents . 5)
                              (projects . 5)
                              (bookmarks . 5)
                              (agenda . 5)))))

#+end_src
* Usability
** Ivy + Counsel
#+begin_src elisp

;; Ivy trio (for better command completition)
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x g" . centaur-tabs-counsel-switch-group)
         ("C-x f" . counsel-find-file))
  :custom ((ivy-initial-inputs-alist nil)))  ; Don't start ivy searches with ^ (mostly significant for M-x)

(use-package swiper
  :bind ("C-s" . swiper))
  
(use-package ivy
  :init (ivy-mode 1)
  :diminish ivy-mode
  :bind (:map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-k" . ivy-previous-line)
         ("C-j" . ivy-next-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-switch-buffer-kill)
         ("TAB" . ivy-done)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill)))

;; Richer and more friendly interface for Ivy
(use-package ivy-rich
  :init (ivy-rich-mode 1))

#+end_src
** Which key
#+begin_src elisp

(use-package which-key
  :init (which-key-mode t)
  :custom ((which-key-idle-delay 0.5)))

#+end_src
** Evil mode
#+begin_src elisp

;; Keychords first
; Would be good if we could skip this.
(use-package key-chord
  :config (key-chord-mode 1))

;; Evil itself
(use-package evil
  :init
  (setq evil-want-keybinding nil)
  (setq evil-want-integration t)
  :custom ((evil-shift-width tab-width)
           (evil-shift-round t)
           (evil-split-window-below t)
           (evil-split-window-right t)
           (evil-want-C-u-scroll t)
           (evil-undo-system 'undo-redo))
  :config
  (evil-mode)
  (define-key evil-normal-state-map (kbd "Ã©") "$")
  (key-chord-define evil-insert-state-map "jk" 'evil-normal-state))

;; Evil collection for other plugins
(use-package evil-collection
  :after evil
  :config
  (dolist (mode '(magit help))
          (add-to-list 'evil-collection-mode-list 'mode))
  (evil-collection-init))

;; This wasn't in the collection
(use-package evil-org
  :after (org evil)
  :hook (org-mode . evil-org-mode)
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

#+end_src
* Org mode
#+begin_src elisp

;; The package
(use-package org
  :hook (org-mode . (lambda()
                      (org-indent-mode)
                      (visual-line-mode 1)))
  :custom ((org-directory "~/pCloudDrive/OrgNotes/")
           (org-agenda-files (list org-directory))
           (setq org-auto-align-tags t))
  :config
  ;; Disable electric pair mode for <> when in org mode for org-tempo to work
  (add-hook 'org-mode-hook (lambda () (setq-local electric-pair-inhibit-predicate
                                                  `(lambda (c) (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c)))))))

;; Have variable size headings
(dolist (face '((org-level-1 . 1.5)
                (org-level-2 . 1.4)
                (org-level-3 . 1.3)
                (org-level-4 . 1.2)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.1)))
  (set-face-attribute (car face) nil :height (cdr face)))

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode))

(require 'org-tempo)

;; Disable src block indentation
(setq org-edit-src-content-indentation 0)

#+end_src
* Dev stuff
** Git
#+begin_src elisp

;; Magit
(use-package magit
  :bind (("C-c g" . magit-status))
  :config
  (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1))
  
;; Git signs
(use-package git-gutter-fringe
  :hook (prog-mode . git-gutter-mode)
  :config
  (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))

#+end_src
** LSP
*** Basic LSP mode configuration
#+begin_src elisp

;; LSP mode
(use-package lsp-mode
  :custom (lsp-keymap-prefix "C-l")
  :hook ((c-mode . lsp-deferred)
         (csharp-mode . lsp-deferred)
         (rust-mode . lsp-deferred))
  :commands (lsp lsp-deferred))

(use-package lsp-ui
  :commands (lsp-ui-mode))

(use-package lsp-ivy
  :commands lsp-ivy-workspace-symbol)

(use-package company
  :bind (:map company-active-map
         ("<tab>" . company-complete-common-or-cycle)
         ("<backtab>" . company-select-previous))
  :custom ((company-idle-delay 0.0)
           (company-minimum-prefix-length 1)))

;; TODO: replace later with built in tree-sitter
(use-package tree-sitter
  :config
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(use-package tree-sitter-langs)
(use-package tree-sitter-indent)

(use-package projectile
  :diminish projectile-mode
  :init (projectile-mode)
  :custom ((projectilel-completion-system 'ivy))
  :bind-keymap ("C-c p" . projectile-command-map))

#+end_src
*** Language specific plugins and settings
#+begin_src elisp

;; indentation for c style languages
(setq-default c-default-style "bsd")
(setq-default c-basic-offset 4)

; Python
(use-package lsp-pyright
  :hook (python-mode . (lambda() (require 'lsp-pyright)
                          (lsp-deferred))))

; Eww
(use-package yuck-mode)

; Rust
(use-package rust-mode
  :config
  ;(rust-mode)
)

#+end_src
** Extra
#+begin_src elisp

;; Vterm

(use-package vterm
  :bind ("C-c t" . vterm)
  :hook (vterm-mode-hook . (lambda ()
            (set (make-local-variable 'buffer-face-mode-face) 'fixed-pitch)
            (buffer-face-mode t)))
  :custom (vterm-shell "/usr/bin/fish"))

#+end_src
* Custom remaps
Subject to change! As I use emacs I'll find more and more things that I could remap with the leader key.

#+begin_src elisp

(use-package general
  :config
  (general-evil-setup)

  (general-create-definer leader-key
    :states '(normal visual emacs)
    :keymaps 'override
    :prefix "SPC")

  ;; Buffer commands
  (leader-key
    "b" '(:ignore t :wk "Buffer commands")
    "b b" '(counsel-switch-buffer :wk "Buffer switcher")
    "b g" '(centaur-tabs-counsel-switch-group :wk "Switch centaur tab buffer group")
    "b c" '(kill-this-buffer :wk "Kill current buffer")
    "b k" '(kill-buffer :wk "Kill a buffer")
    "b n" '(centaur-tabs-forward-tab :wk "Next centaur tab buffer")
    "b p" '(centaur-tabs-backward-tab :wk "Previous centaur tab buffer"))

  ;; Search commands
  (leader-key
    "f" '(:ignore t :wk "Search commands")
    "f f" '(counsel-find-file :wk "Find file")
    "f t" '(swiper :wk "Search in current buffer"))

  ;; Git commands
  (leader-key
    "g" '(:ignore t :wk "Git commands")
    "g g" '(magit-status :wk "Open Magit"))

  ;; Projectile
  (leader-key
    "p" '(projectile-command-map :wk "Projectile commands"))

  ;; Misc
  (leader-key
    "SPC" '(counsel-M-x :wk "M-X"))
  ;; Org
  (leader-key
    "o" '(:ignore t :wk "Org commands")
    "o t" '(org-todo-list :wk "TODO list"))

  ;; Dired
  (general-define-key
    :keymaps 'dired-mode-map
    "n" '(dired-create-empty-file :wk "Create emtpy file"))
)

#+end_src
