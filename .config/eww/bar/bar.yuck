(deflisten ls-active-window
  :initial "Hyprland"
  "./scripts/active_window.sh")

(deflisten ls-workspaces
  :initial ""
  "./scripts/workspaces.sh")

(defpoll pl-network
  :interval "5s"
  "./scripts/network.sh")

(defpoll pl-wifi-strength
  :interval "5s"
  "./scripts/wifi_strength.sh")

;;;
;;;   Widgets
;;;

(defwidget launcher []
  (button :class "btn-launcher"
          :onclick "./scripts/launch_launcher.sh"
          (label :class "launcher-icon"
                 :text "󱓞")))

(defwidget active-window []
  (label :class "ms-2"
         :text "${ls-active-window}"))

(defwidget workspaces []
  (box :space-evenly true
       (for ws in ls-workspaces
            (button :onclick "hyprctl dispatch workspace ${ws.id}"
                    :class "workspace-button"
                    (label :class "${ws.current ? "workspace-current" : ""} ${ws.fullscreen ? "workspace-fullscreen" : ""}"
                           :text "${ws.id - 1}")))))

(defwidget network-status []
  (button :onclick "footclient ./scripts/network_settings.sh &"
          (label :class "icon off-icon"
                 :text "${pl-network == "ethernet" ? "󰌗" :
                          pl-network == "wifi" ?
                            pl-wifi-strength < 25 ? "󰤟" : 
                            pl-wifi-strength < 50 ? "󰤢" :
                            pl-wifi-strength < 75 ? "󰤥" : 
                            "󰤨"
                          : "󰤮" }")))

(defwidget battery-status []
  (box :orientation "horizontal"
       :class "me-1"
       :space-evenly false
       (label :class "icon me-1 battery-icon ${EWW_BATTERY.BAT1.status == "Charging" ? "charging" : EWW_BATTERY.BAT1.capacity < 10 ? "low" : ""}"
              :text "${EWW_BATTERY.BAT1.status == "Charging" ? "󰂄" :
                       EWW_BATTERY.BAT1.capacity < 10 ? "󰁺" :
                       EWW_BATTERY.BAT1.capacity < 20 ? "󰁻" :
                       EWW_BATTERY.BAT1.capacity < 30 ? "󰁼" :
                       EWW_BATTERY.BAT1.capacity < 40 ? "󰁽" :
                       EWW_BATTERY.BAT1.capacity < 50 ? "󰁾" :
                       EWW_BATTERY.BAT1.capacity < 60 ? "󰁿" :
                       EWW_BATTERY.BAT1.capacity < 70 ? "󰂀" :
                       EWW_BATTERY.BAT1.capacity < 80 ? "󰂁" :
                       EWW_BATTERY.BAT1.capacity < 90 ? "󰂂" :
                       "󰁹"}")
       (label :text "${EWW_BATTERY.BAT1.capacity}%")))

(defwidget time []
  (label :class "me-2"
         :text "${formattime(EWW_TIME, "%b. %d. %H:%M")}"))

(defwidget dropdown-toggle []
  (button :onclick "${EWW_CMD} open --toggle dropdown-closer && ${EWW_CMD} open --toggle dropdown"
          :timeout "1000ms"
          :class "btn-dropdown"
          (label :class "icon-dropdown"
                 :text "")))

(defwidget screenshot []
  (button :onclick "~/.local/scripts/wl_screenshot.sh"
          :onrightclick "sleep 1 && ~/.local/scripts/wl_screenshot.sh -s"
          :class "me-1"
          :tooltip "Take a screenshot"
          (label :class "icon off-icon"
                 :text "󰹑")))

(defwidget volume-icon []
  (button :class "me-1"
          :timeout "1000ms"
          :onclick "pulsemixer --toggle-mute"
          :onrightclick "pavucontrol &"
          (label :class "icon"
                 :text "${pl-volume-icon}")))

;;;
;;;   Containers
;;;

(defwidget bar-left []
  (box :orientation "h"
       :halign "start"
       :space-evenly false
       (launcher)
       (workspaces)
       (active-window)))

(defwidget bar-right []
  (box :orientation "h"
       :halign "end"
       :space-evenly false
       (screenshot)
       (network-status)
       (volume-icon)
       (time)
       (battery-status)
       (dropdown-toggle)))

(defwidget bar-container []
  (box :class "bar container"
       :orientation "h"
       (bar-left)
       (bar-right)))

(defwindow bar
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "36px"
                      :anchor "top center")
  :stacking "fg"
  :exclusive true
  (bar-container))
